<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>

    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-md-12">
                <form id="dashboardForm" action="/dashboard" method="GET" class="mb-3">
                    <div class="form-group d-flex justify-content-between">
                        <div>
                            <label>Select columns to display:</label>
                            <div class="mt-3">
                                <button type="button" class="btn btn-primary select-all-btn">Select All</button>
                                <button type="button" class="btn btn-secondary deselect-all-btn">Deselect All</button>
                            </div>

                            <div>
                                <% columns.forEach(column=> { %>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input column-checkbox" type="checkbox" name="columns"
                                            value="<%= column %>" <%=selectedColumns.includes(column) ? 'checked' : ''
                                            %>>
                                        <label class="form-check-label">
                                            <%= column %>
                                        </label>
                                    </div>
                                    <% }) %>
                            </div>
                        </div>

                    </div>
                    <button type="submit" name="submit" value="filter" class="btn btn-success" id="sendToAI">Show
                        Selected Columns</button>
                    <button type="button" class="btn btn-warning reset-columns-btn">Reset Columns</button>
                    <button type="submit" name="submit" class="btn btn-info" value="clean" id="cleanDataBtn">Clean
                        Data</button>

                </form>

            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <table class="table" id="dataTable">
                    <thead>
                        <tr>
                            <% selectedColumns.forEach(column=> { %>
                                <th>
                                    <%= column %>
                                </th>
                                <% }) %>
                        </tr>
                    </thead>
                    <tbody>
                        <% data.forEach((row, index)=> { %>
                            <tr class="data-row">
                                <% selectedColumns.forEach(column=> { %>
                                    <td>
                                        <%= row[column] || 'null' %>
                                    </td>
                                    <% }) %>
                            </tr>
                            <% }) %>
                    </tbody>
                </table>
            </div>
        </div>

        <nav aria-label="Page navigation">
            <ul class="pagination">
                <% paginationLinks.forEach(link=> { %>
                    <li class="page-item <%= link.isActive ? 'active' : '' %>">
                        <a class="page-link" href="/dashboard?<%= link.queryString %>">
                            <%= link.page %>
                        </a>
                    </li>
                    <% }) %>
            </ul>
        </nav>


        <div class="row">
            <div class="col-md-12">
                <p>Total Data Available: <%= totalCount %>
                </p>
            </div>
        </div>

        <div class="container py-5">
            <div class="row">
                <div class="col-md-6 mb-4">
                    <button id="regressionButton" onclick="analyze('regression')"
                        class="btn btn-primary mb-2">Regression Analysis</button>
                    <div id="box1" class="p-3 border" style="background-color: #f8d7da;">

                    </div>
                </div>
                <div class="col-md-6 mb-4">

                    <button id="neuralButton" onclick="analyze('neurons')" class="btn btn-primary mb-2">Neural Network
                        Analysis</button>
                    <div id="box2" class="p-3 border" style="background-color: #d4edda;">

                    </div>
                </div>
            </div>
        </div>

        <!-- <button id="analyzeButton" onclick="analyze('test')" class="btn btn-primary ">Test</button>
        <button id="analyzeButton" onclick="analyze('regression')" class="btn btn-primary mb-2">Regression Analysis</button>
        <button id="analyzeButton" onclick="analyze('neurons')" class="btn btn-primary mb-2">Neural Network Analysis</button>

        <div id="box1" class="bg-warning"></div>
        
        <div id="box2" class="bg-success"></div> -->
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>


        function analyze(analysisType) {
            var boxId = analysisType === 'regression' ? 'box1' : 'box2';
            var box = document.getElementById(boxId);
            box.innerHTML = ''; // Clear the box content

            // Create and show loader with a message
            var loader = document.createElement('div');
            loader.className = 'spinner-border text-primary';
            loader.role = 'status';
            loader.style.marginRight = '5px'; // Add some spacing between the spinner and the text
            var spinnerText = document.createElement('span');
            spinnerText.className = 'visually-hidden';
            spinnerText.textContent = 'Loading...';

            var message = document.createElement('div');
            message.textContent = 'Analysis in progress, please wait...';
            message.className = 'd-flex align-items-center';
            message.appendChild(loader);
            message.appendChild(spinnerText);

            box.appendChild(message);

            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4) {
                    if (this.status == 200) {
                        let imageData = JSON.parse(this.responseText);
                        let hash = imageData.session;
                        //console.log(imageData);
                        ajaxCall(hash, analysisType);

                    } else {
                        box.innerHTML = '<div class="alert alert-danger">Failed to initiate analysis. Please try again later.</div>';
                        console.log('Failed to load image data');
                    }
                }
            };
            xhttp.open("GET", "http://54.236.30.169:4000/api/ai/" + analysisType);
            xhttp.send();
        }

        function ajaxCall(hash, name) {
            var boxId = name === 'regression' ? 'box1' : 'box2';
            var box = document.getElementById(boxId);

            let ajax = new XMLHttpRequest();
            ajax.onreadystatechange = function () {
                if (ajax.readyState == 4) {
                    if (ajax.status == 200) {
                        let transactionData = JSON.parse(ajax.responseText);
                        let keys = Object.keys(transactionData);
                        let values = Object.values(transactionData);

                        if (keys && keys.length > 0) {
                            for (let i = 0; i < values.length; i++) {
                                box.innerHTML = '';
                                loadImage(values[i], hash, name);
                            }
                        } else {

                            // wait for 10 seconds and call the function again
                            setTimeout(function () {
                                console.log('Waiting for 10 seconds')
                                ajaxCall(hash, name);
                            }, 10000);
                        }
                    }

                } else {
                    console.log('Failed to load transaction data');
                }
            };
            ajax.open("GET", "http://54.236.30.169:4000/api/transaction/" + hash);
            ajax.send();
        }

        function loadImage(imageUrl, hash, name) {
            var boxId = name === 'regression' ? 'box1' : 'box2';
            var box = document.getElementById(boxId);

            var img = new Image();
            img.className = "img-fluid";
            img.onload = function () {
                box.appendChild(img);
            };
            img.onerror = function () {
                box.innerHTML = '<div class="alert alert-danger">Failed to load image.</div>';
            };
            img.src = "http://54.236.30.169:4000/api/images/" + imageUrl;
            console.log(img.src);
        }

        document.addEventListener('DOMContentLoaded', function () {
            const selectAllBtn = document.querySelector('.select-all-btn');
            const deselectAllBtn = document.querySelector('.deselect-all-btn');
            const resetColumnsBtn = document.querySelector('.reset-columns-btn');
            const checkboxes = document.querySelectorAll('.column-checkbox');
            const rowsSelect = document.getElementById('rowsSelect');
            const dataRows = document.querySelectorAll('tr.data-row');
            //const imageDisplay = document.getElementById('imageDisplay');
            // const nextImageButton = document.getElementById('nextImageButton');
            //  const loadDoc = document.getElementById('analyzeButton');


            // if (nextImageButton) {
            //     nextImageButton.addEventListener('click', loadNextImage);
            // } else {
            //     console.error('Element with ID "nextImageButton" not found.');
            // }

            // Function to update the visibility of data rows based on the selected number of rows
            const updateVisibleRows = () => {
                const numRowsToShow = parseInt(rowsSelect.value, 10);
                dataRows.forEach((row, index) => {
                    row.style.display = index < numRowsToShow ? '' : 'none';
                });
            };

            // Event listener for the 'Select All' button
            selectAllBtn.addEventListener('click', () => {
                checkboxes.forEach(checkbox => checkbox.checked = true);
            });

            // Event listener for the 'Deselect All' button
            deselectAllBtn.addEventListener('click', () => {
                checkboxes.forEach(checkbox => checkbox.checked = false);
            });

            // Event listener for the 'Reset Columns' button
            resetColumnsBtn.addEventListener('click', () => {
                window.location.href = '/dashboard'; // Redirect without any query parameters
            });



            // // Function to load the next image
            // function loadNextImage() {     
            //     fetch('http://localhost:4200/images')
            //         .then(response => response.text())
            //         .then(html => {
            //             const parser = new DOMParser();
            //             const doc = parser.parseFromString(html, 'text/html');
            //             const imgSrc = doc.querySelector('img').src;
            //             imageDisplay.src = imgSrc;
            //         })
            //         .catch(error => {
            //             console.error('Error loading image:', error);
            //         });
            // }

            // Initial load of the first image
            //loadNextImage();



            // nextImageButton.addEventListener('click', loadNextImage);

            // Event listener for any change in the checkboxes
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {


                });
            });

            // Adjust visibility of data rows when the selection changes
            rowsSelect.addEventListener('change', updateVisibleRows);
            // Event listener for image click to load the next image
            //imageDisplay.addEventListener('click', loadNextImage);
            // Event listener for next image button click
            //nextImageButton.addEventListener('click', loadNextImage);

            // Initial adjustment of data rows visibility based on the default selection
            updateVisibleRows();

        });



    </script>



</body>

</html>